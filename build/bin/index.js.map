{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/bin/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport Jsyncd from '../lib/jsyncd.js';\nimport chalk from 'chalk';\nimport daemon from 'daemon';\nimport path from 'node:path';\nimport JsyncdOptionParser from '../lib/jsyncdoptionparser.js';\n\nconst processName = 'jsyncd';\n\nparseOptionsAndRunProgram();\n\nasync function parseOptionsAndRunProgram() {\n  const optionParser = new JsyncdOptionParser({\n    processName: processName,\n  });\n\n  await optionParser.parse().catch((err) => {\n    console.log(`Error parsing cli options: ${err.message}`);\n    process.exit();\n  });\n\n  const configFilePath = optionParser.configFilePath.value();\n\n  const configObj = await import(path.resolve(configFilePath)).catch((err) => {\n    console.log(chalk.red(`Problem reading or parsing configuration file: ${configFilePath}.`));\n    console.log(chalk.green(`To create skeleton config file run this command:`));\n    console.log(chalk.green(`    mkdir -p ${path.dirname(configFilePath)}; cp config_example.mjs ${configFilePath};`));\n    console.log(`${err}`);\n    process.exit(1);\n  });\n\n  const config = configObj.default;\n\n  console.log(chalk.green(`Read configuration file: ${configFilePath}`));\n\n  if (config === undefined) {\n    console.log(chalk.red(`Config file '${configFilePath}' was read but it does not export a default 'config' variable. Please ensure ${configFilePath} includes an export statement i.e. 'export default config;'`));\n    process.exit(1);\n  }\n\n  config.logFile = optionParser.logFile.value() || config.logFile;\n\n  if (optionParser.ignoreInitial.value()) {\n    config.chokidarWatchOptions.ignoreInitial = true;\n  }\n\n  if (optionParser.debug.value()) {\n    config.debug = true;\n  }\n\n  if (optionParser.daemon.value() || config.daemonize) {\n    if (!config.logFile) {\n      console.log(chalk.red('-l, --log option required when using daemonize'));\n      process.exit();\n    }\n\n    console.log(chalk.yellow(`Process will detach. Output logged to '${config.logFile}'`));\n\n    // pass cwd to work around an issue with the library passing the function process.cwd instead of the result\n    daemon({cwd: process.cwd()});\n  }\n\n  process.title = `${processName} ${configFilePath}`;\n\n  const jsyncd = new Jsyncd(config);\n\n  jsyncd.startSync().catch((err) => {\n    jsyncd.sendErrorToLog('Top level error, exiting the program. Exiting with error:');\n    jsyncd.sendToLog(err);\n    process.exit(1);\n  });\n\n  process.on('SIGINT', () => {\n    jsyncd.sendWarningToLog(jsyncd.getTimestamp() + ' Caught SIGINT. Terminating...');\n    process.exit();\n  });\n\n  process.on('SIGTERM', () => {\n    jsyncd.sendWarningToLog(jsyncd.getTimestamp() + ' Caught SIGTERM. Terminating...');\n    process.exit();\n  });\n}\n"]}