{"version":3,"file":"jsyncd.js","sourceRoot":"","sources":["../../src/lib/jsyncd.ts"],"names":[],"mappings":"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","sourcesContent":["import {Rsync} from 'rsync';\nimport chokidar from 'chokidar';\nimport {open as fsopen} from 'node:fs/promises';\nimport {existsSync} from 'node:fs';\nimport chalk from 'chalk';\n\nconst availableChalkColors: Array<chalk.Chalk> = [\n  chalk.hex('#FFAAAA'),\n  chalk.blue,\n  chalk.magenta,\n  chalk.cyan,\n  chalk.greenBright,\n  chalk.blueBright,\n  chalk.magentaBright,\n  chalk.cyanBright,\n];\n\ninterface AppConfig {\n  directories: object;\n  chokidarWatchOptions: object;\n  sshShellOptions: string;\n  rsyncBuildOptions: RsyncBuildOptions;\n  targetHostname: string;\n  targetUsername: string;\n  name: string;\n}\n\ninterface DirectorySyncStatus {\n  syncing: boolean;\n  firstSyncComplete: boolean;\n}\n\ninterface JsyncdConfig {\n  appConfigs: AppConfig[];\n  logFile: string;\n  chokidarWatchOptions: object;\n  rsyncBuildOptions: RsyncBuildOptions;\n  debug: boolean;\n}\n\ninterface RsyncBuildOptions {\n  source: string;\n  destination: string;\n}\n\nclass Jsyncd {\n  _config: JsyncdConfig;\n  _logFileHandle: any;\n  _rsyncOutputRegex: RegExp;\n  _rsyncStartOfLineRegex: RegExp;\n\n  constructor(config: JsyncdConfig) {\n    this._config = config;\n    this._logFileHandle = null;\n    this._rsyncOutputRegex = new RegExp(/^((<f\\S*)|(cd\\S*)) /gm);\n    this._rsyncStartOfLineRegex = new RegExp(/^/gm);\n  }\n\n  async startSync() {\n    const config = this._config;\n\n    const apps = config.appConfigs;\n\n    if (!Array.isArray(apps) || !apps.length) {\n      throw new ConfigFileError('Invalid or empty config.appConfigs');\n    }\n\n    if (config.logFile) {\n      await fsopen(config.logFile, 'a').then((tempLogHandle) => {\n        console.log(`Sending logs to ${config.logFile}`);\n        this._logFileHandle = tempLogHandle;\n      }).catch((err) => {\n        err.type = `Error writing to '${config.logFile}'. Ensure file exists and is writable.`;\n        throw err;\n      });\n    }\n\n    apps.forEach((appConfig, appIndex) => this.syncApp(appConfig, appIndex));\n  }\n\n  syncApp(appConfig: AppConfig, appIndex: number) {\n    const config = this._config;\n\n    const applicationDirectories = appConfig.directories;\n\n    if (!Array.isArray(applicationDirectories) || !applicationDirectories.length) {\n      throw new ConfigFileError(`Invalid or empty config.appConfig[${appIndex}].directories[]`);\n    }\n\n    let chokidarWatchOptions = {\n      ...config.chokidarWatchOptions,\n      ...appConfig.chokidarWatchOptions,\n    };\n\n    // Expect the ssh options to be exact key/value pairs that match the ssh manual\n    let shellOptionsArray = Object.entries(appConfig.sshShellOptions || {});\n\n    shellOptionsArray.forEach(entry => entry.forEach(e => {\n      const t = typeof e;\n\n      if (t !== 'string' && t !== 'number') {\n        throw new ConfigFileError(`config.appConfig[${appIndex}].sshShellOptions must be strings or integers. Invalid option: ${JSON.stringify(entry)}`);\n      }\n    }));\n\n    // filter out any key/values any empty strings and join them together for a formatted string representation of the object.\n    const sshObjString = shellOptionsArray.map(entry => entry.filter(e => String(e) !== '').join(' ')).join(' ');\n    const remoteHostUri = this.buildRemoteURI(appConfig.targetHostname, appConfig.targetUsername);\n\n    let activeDirectorySyncs: Array<DirectorySyncStatus> = [];\n\n    applicationDirectories.forEach((directoryConfig, directoryIndex) => {\n      let rsyncBuildOptions = {\n        ...config.rsyncBuildOptions,\n        ...appConfig.rsyncBuildOptions,\n        ...directoryConfig,\n      };\n\n      if (!rsyncBuildOptions.source) {\n        throw new ConfigFileError(`Missing appConfig[${appIndex}].directories[${directoryIndex}].source. Please setup a valid source path.`);\n      }\n\n      if (!rsyncBuildOptions.destination) {\n        throw new ConfigFileError(`Missing appConfig[${appIndex}].directories[${directoryIndex}].destination. Please set up a valid destination path.`);\n      }\n\n      if (!existsSync(rsyncBuildOptions.source)) {\n        throw new ConfigFileError(`'${rsyncBuildOptions.source}' for appConfig[${appIndex}].directories[${directoryIndex}].source does not exist. Cannot sync an unavailable directory.`);\n      }\n\n      rsyncBuildOptions.destination = remoteHostUri + rsyncBuildOptions.destination;\n      rsyncBuildOptions.shell = sshObjString && `ssh ${sshObjString}`;\n\n      const directorySyncStatus: DirectorySyncStatus = {syncing: false, firstSyncComplete: false};\n      activeDirectorySyncs.push(directorySyncStatus);\n\n      const sourcePath = rsyncBuildOptions.source;\n\n      let appName = appConfig.name && ` ${appConfig.name}:[${directoryIndex + 1}]`;\n\n      const modColors =  directoryIndex % availableChalkColors.length;\n      const chalkColorFunc = availableChalkColors[modColors];\n\n      const watcher = chokidar.watch(sourcePath, chokidarWatchOptions).on('all', (event, localFileDir) => {\n        // this.sendDebugToLog(`Chokidar event: ${chalk.yellow(event)} Monitored Path: ${chalk.yellow(localFileDir)}`, chalkColorFunc);\n\n        // only listen for these events for now.\n        if (event !== 'addDir' && event !== 'change' && event !== 'add') {\n          return;\n        }\n\n        if (directorySyncStatus.syncing) {\n          // this.sendDebugToLog(`Warning: A sync is already queued for ${chalk.green(sourcePath)} Skipping...`, chalkColorFunc);\n          return;\n        }\n\n        const activeSyncArray = Object.values(activeDirectorySyncs).filter(directorySyncInfo => directorySyncInfo.syncing);\n\n        if (!activeSyncArray.length) {\n          this.sendToLog('\\n');\n        }\n\n        directorySyncStatus.syncing = true;\n\n        this.buildAndRunRsync(rsyncBuildOptions, chalkColorFunc, appName).then(() => {\n          if (directorySyncStatus.firstSyncComplete) {\n            directorySyncStatus.syncing = false;\n          } else {\n            watcher.on('ready', () => {\n              directorySyncStatus.syncing = false;\n            });\n          }\n        });\n      });\n\n      // When chokidar.ignoreInitial is false, it does a complete scan of all the files and folders under the directory structure.\n      // This can take a while. Only run one rsync during that phase.\n      watcher.on('ready', () => {\n        directorySyncStatus.firstSyncComplete = true;\n      });\n    });\n  }\n\n  async buildAndRunRsync(rsyncBuildOptions: RsyncBuildOptions, chalkColorFunc:  chalk.Chalk | undefined, appName='') {\n    let rsync = Rsync.build(rsyncBuildOptions);\n\n    this.sendToLog(`${this.getTimestamp()}${appName} Calling rsync for ${rsyncBuildOptions.source} -> ${rsyncBuildOptions.destination}`, chalkColorFunc);\n    this.sendDebugToLog(rsync.command(), chalkColorFunc);\n\n    let outputFirstLine = false;\n\n    rsync.output(\n      (stdoutHandle: Buffer) => {\n        let [outputContent, syncSuccess] = this.parseRsyncOutHandle(stdoutHandle);\n\n        if (!outputFirstLine && syncSuccess) {\n          this.sendToLog(`${this.getTimestamp()}${appName} Syncing new/modified files/dirs`, chalkColorFunc);\n          outputFirstLine = true;\n        }\n\n        this.sendToLog(outputContent, chalkColorFunc);\n      },\n      (stderrHandle: Buffer) => {\n        let [outputContent] = this.parseRsyncOutHandle(stderrHandle);\n\n        this.sendWarningToLog(`${this.getTimestamp()}${appName} Rsync error content:`);\n        this.sendErrorToLog(`${outputContent}`);\n      }\n    );\n\n    const exitCode = await rsync.execute().catch((error: {code: string;}) => {\n      this.sendWarningToLog(`${this.getTimestamp()}${appName} ${error}`);\n      return error.code;\n    });\n\n    exitCode !== undefined && this.sendToLog(`${this.getTimestamp()}${appName} Finished with exitcode: ${exitCode}`, chalkColorFunc);\n  }\n\n  buildRemoteURI(hostname: string, username: string) {\n    let remoteUri = username && username + '@';\n    remoteUri += hostname && hostname + ':';\n\n    return remoteUri || '';\n  }\n\n  parseRsyncOutHandle(fileHandle: Buffer):[string, boolean] {\n    // rsync with the -i option has a coded description of the changes at the beginning of the filename. Just trim that off.\n    let rsyncOutputRegex = this._rsyncOutputRegex;\n\n    let rsyncOutString = fileHandle.toString().trim();\n\n    let formattedOutput = rsyncOutString.replace(rsyncOutputRegex, '').replace(this._rsyncStartOfLineRegex, ' '.repeat(4));\n    return [formattedOutput, rsyncOutString.match(rsyncOutputRegex) ? true : false];\n  }\n\n  sendErrorToLog(contentToLog: string) {\n    this.sendToLog(contentToLog, chalk.red);\n  }\n\n  sendWarningToLog(contentToLog: string) {\n    this.sendToLog(contentToLog, chalk.yellow);\n  }\n\n  sendDebugToLog(contentToLog: string, chalkFunction: chalk.Chalk | undefined = undefined) {\n    this._config.debug && this.sendToLog(contentToLog, chalkFunction);\n  }\n\n  sendToLog(contentToLog: string, chalkFunction: chalk.Chalk | undefined = undefined) {\n    if (this._logFileHandle) {\n      this._logFileHandle.write(contentToLog + '\\n');\n    } else {\n      if (typeof chalkFunction === 'function') {\n        console.log(chalkFunction(contentToLog));\n      } else {\n        console.log(contentToLog);\n      }\n    }\n  }\n\n  getTimestamp() {\n    const date = new Date();\n    return `${date.toDateString()} ${date.toTimeString().split(' ')[0]}`;\n  }\n}\n\nclass ConfigFileError extends Error {\n  type: string;\n\n  constructor(message: string) {\n    super(message);\n    this.type = 'Misconfigured config file';\n  }\n}\n\nexport default Jsyncd;"]}