{"version":3,"file":"jsyncdoptionparser.js","sourceRoot":"","sources":["../../src/lib/jsyncdoptionparser.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport * as fs from 'fs';\nimport path from 'path';\nimport OptionParser from 'option-parser';\nimport find from 'find-process';\n\nclass JsyncdOptionParser extends OptionParser {\n  constructor(param: {processName: string;}) {\n    super(param);\n\n    const processName = param.processName;\n    this._configFilePath = path.join(os.homedir(), '.config', processName, 'config.mjs');\n\n    this.addOption('c', 'configFilePath', 'Config file path, alternative option to supplying the filename as the last parameter', 'configFilePath')\n      .argument('FILE', true)\n      .action((filePath: string) => {\n        this._configFilePath = filePath;\n      });\n\n    this.addOption('l', 'log', 'Log file path', 'logFile')\n      .argument('FILE', true);\n\n    this.addOption('k', 'kill', `Kill any running ${processName} processes and exit, true value exits program`, 'kill')\n      .argument('CONTINUE', false)\n      .action(async (stopAfterKillProcess: string) => {\n        await killRunningProcesses(processName);\n\n        if (stopAfterKillProcess && stopAfterKillProcess !== '0') {\n          console.log(`Ending process due to option: -k=${stopAfterKillProcess}`);\n          process.exit();\n        }\n      });\n\n    this.addOption('h', 'help', 'Display this help message')\n      .action(\n        this.helpAction(`[Options] [<ConfigFile>]\\n\n  If <ConfigFile> is not supplied, defaults to '${this._configFilePath}'\n  Command line options override settings defined in <ConfigFile>`));\n\n    this.addOption('v', 'version', 'Display version information and exit', 'version')\n      .action(() => {\n        const packageJsonPath = new URL('../package.json', import.meta.url);\n        const {version} = JSON.parse(fs.readFileSync(packageJsonPath).toString());\n        console.log(`${processName} version ${version}`);\n        process.exit();\n      });\n\n    this.addOption('d', 'daemon', 'Detach and daemonize the process', 'daemon');\n    this.addOption('i', 'ignore', 'Pass `ignoreInitial` to `chokidarWatchOptions`, skips startup sync', 'ignoreInitial');\n    this.addOption('D', 'debug', 'Log the generated `Rsync.build` command', 'debug');\n  }\n\n  async parse(a: object | undefined = undefined) {\n    let unparsed = await super.parse(a);\n\n    this._configFilePath = unparsed.pop() || this._configFilePath;\n\n    if (!this.configFilePath.value()) {\n      await this.configFilePath.handleArgument('c', this._configFilePath);\n    }\n\n    return unparsed;\n  }\n}\n\nasync function killRunningProcesses(processName: string) {\n  const pid = process.pid;\n\n  const processList = await find('name', `${processName} `).catch((err: Error) => {\n    console.log(`Error getting process list: ${err}`);\n    return [];\n  });\n\n  let killedProcess = false;\n\n  for (let processInfo of processList) {\n    let runningProcessPid = processInfo.pid;\n\n    // Skip if the looking at the currently running process or if the process is running in test mode.\n    if (runningProcessPid === pid || processInfo.cmd.includes('nodemon')) {\n      continue;\n    }\n\n    console.log(`Killing a running ${processName} process. pid: ${runningProcessPid}`);\n    process.kill(processInfo.pid);\n\n    killedProcess = true;\n  }\n\n  if (!killedProcess) {\n    return console.log(`Currently no ${processName} processes running`);\n  }\n}\n\nexport default JsyncdOptionParser;"]}